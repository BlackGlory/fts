* FTS
一个受[[https://github.com/valeriansaliou/sonic][Sonic]]启发的Web友好的自托管ad-hoc微服务,
提供基于 HTTP 的搜索功能.
所有URL都自带反射性的CORS.

** 特性
通常语境下, 全文搜索引擎集成了数据库+分词器+倒排索引+查询语言.
FTS重新思考了传统全文搜索引擎的功能, 将其简化为更具有自由性, 同时占用资源更低的版本.

*** 索引编制
FTS有意简化了数据库和分词器, 将调用数据库和分词的大多数职责交给客户端控制.
如此设计是因为现实世界中数据库方案和分词方案种类繁多, 绑定特定的方案只会徒增耦合性.

**** 存储vector和标识符
FTS是一个提供vector到标识符的键值对数据库, 标识符是另一个数据库中的键.

客户端查询得到标识符后, 需在另一个数据库中查找这些标识符并进一步处理以得到搜索结果.

**** 手动分词
FTS本身不提供分词功能, 它的底层分词机制根据实际使用的后端略有不同,
大多数后端只支持对英语进行分词或只支持常见的停用词(stopword).

使用FTS时, 建议将其视作没有任何分词功能, 由客户端进行分词并手动提交有序的词素(lexeme)数组.

***** 缺点
****** 通信性能
FTS现阶段在更新词典时必须通过HTTP API手动刷新整个倒排索引,
效率会比内置分词的全文搜索引擎慢得多.
理论上可以用WebSocket降低通信成本, 但目前还没有计划实现.

****** 查询性能
FTS目前使用的后端PostgreSQL所具有的全文搜索功能不适合用于中大型数据集.
这意味着即使是只有百万条记录的数据集, 查询性能也不会很理想.

*** 搜索
**** 查询语言
FTS提供的查询语言是一种AST结构的JSON数组.

该项目曾经被设计为只支持查询单词和短语, 逻辑运算必须由客户端手动完成,
考虑到通信延迟和查询优化方面的现实问题, 最终改成了AST的形式.

#+BEGIN_SRC javascript
['a', AND, ['b', OR, [NOT, 'c']]]
// 相当于 'a' AND ('b' OR (NOT 'c'))
#+END_SRC

***** AND = 0
逻辑与, 左值和右值可以嵌套其他表达式.

JavaScript:
#+BEGIN_SRC js
['left', AND, 'right']
#+END_SRC

JSON:
#+BEGIN_SRC json
["left", 0, "right"]
#+END_SRC

***** OR = 1
逻辑或, 左值和右值可以嵌套其他表达式.

JavaScript:
#+BEGIN_SRC js
['left', OR, 'right']
#+END_SRC

JSON:
#+BEGIN_SRC json
["left", 1, "right"]
#+END_SRC

***** NOT = 2
逻辑非, 右值可以嵌套其他表达式.

JavaScript:
#+BEGIN_SRC js
[NOT, 'right']
#+END_SRC

JSON:
#+BEGIN_SRC json
[2, "right"]
#+END_SRC

***** PHRASE = 3
由连续单词组成的短语.

JavaScript:
#+BEGIN_SRC js
[PHRASE, 'a', 'b', 'c']
#+END_SRC

JSON:
#+BEGIN_SRC json
[3, "a", "b", "c"]
#+END_SRC

***** PREFIX = 4
由单个词素构成的前缀搜索.

JavaScript:
#+BEGIN_SRC js
[PREFIX, 'a']
#+END_SRC

JSON:
#+BEGIN_SRC json
[4, "a"]
#+END_SRC

** Install
*** 配置
环境变量 =FTS_HOST= 和 =FTS_PORT= 决定服务器监听的地址和端口, 默认值为localhost和8080.

以下环境变量用于设置PostgreSQL连接信息:
- =FTS_POSTGRES_HOST= 主机名
- =FTS_POSTGRES_PORT= 端口, 默认为5432
- =FTS_POSTGRES_USERNAME= 用户名
- =FTS_POSTGRES_PASSWORD= 密码
- =FTS_POSTGRES_NAME= 数据库

*** 从源代码运行
可以使用环境变量 =FTS_HOST= 和 =FTS_PORT= 决定服务器监听的地址和端口, 默认值为localhost和8080.

#+BEGIN_SRC sh
git clone https://github.com/BlackGlory/fts
cd log
yarn install
yarn build
yarn bundle
yarn --silent start
#+END_SRC

*** Docker
#+BEGIN_SRC sh
docker run \
  --detach \
  --publish 8080:8080 \
  blackglory/fts
#+END_SRC

**** 从源代码构建
#+BEGIN_SRC sh
git clone https://github.com/BlackGlory/fts
cd fts
yarn install
yarn docker:build
#+END_SRC

**** Recipes
***** docker-compose.yml
#+BEGIN_SRC yaml
version: '3.8'

services:
  fts:
    image: 'blackglory/fts'
    restart: always
    depends_on:
      - postgres
    environment:
      - 'FTS_POSTGRES_HOST=postgres'
      - 'FTS_POSTGRES_PORT=5432'
      - 'FTS_POSTGRES_USERNAME=postgres'
      - 'FTS_POSTGRES_PASSWORD=password'
      - 'FTS_POSTGRES_NAME=fts'
      - 'FTS_ADMIN_PASSWORD=password'
    volumes:
      - 'fts-data:/data'
    ports:
      - '8080:8080'

  postgres:
    image: 'postgres:14'
    environment:
      - 'POSTGRES_PASSWORD=password'
    volumes:
      - 'postgres-data:/var/lib/postgresql/data'

volumes:
  fts-data:
  postgres:
#+END_SRC

** API
所有API中的namespace, bucket和id都需要满足此正则表达式: =^[a-zA-Z0-9\.\-_]{0,255}$=

*** Public
**** set
=PUT /fts/<namespace>/buckets/<bucket>/objects/<id>=

往特定namespace的指定对象中写入lexemes:
#+BEGIN_SRC typescript
string[]
#+END_SRC

如果相应的id已经存在于对象, 则会执行替换.

需要注意的是, lexemes在语义上是大小写敏感的, 一些后端可能会区分查询里的大小写.
为了确保查询不受后端差异性的影响, 应该总是进行预处理, 将lexemes和查询都转换为统一的大写或小写形式.

如果开启基于token的访问控制, 则可能需要在Querystring提供具有write权限的token:
=PUT /fts/<namespace>/buckets/<bucket>/objects/<id>?token=<token>=

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header 'Content-Type: application/json' \
  --data '[]' \
  "http://localhost:8080/fts/$namespace/buckets/$bucket/objects/${id}"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/fts/${namespace}/buckets/${bucket}/objects/${id}`, {
  method: 'POST'
, headers: {
    'Content-Type': 'application/json'
  }
, body: JSON.stringify([])
})
#+END_SRC

**** query in namespace
~POST /fts/<namespace>/query~

通过表达式在指定namespace下查询对象的id, 返回结果为JSON数组:
#+BEGIN_EXAMPLE typescript
Array<{
  bucket: string
  id: string
}>
#+END_EXAMPLE

querystring:
- =limit= integer, 限制返回的查询结果数量.
- =offset= integer, 设置查询结果的偏移量.

此操作支持返回[[https://github.com/ndjson/ndjson-spec][ndjson]]格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

如果开启基于token的访问控制, 则可能需要在Querystring提供具有query权限的token:
=/fts/<namespace>/objects?token=<token>=

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --header 'Content-Type: application/json' \
  --data '"expression"' \
  "http://localhost:8080/fts/$namespace/query"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/fts/${namespace}/query`, {
  method: 'POST'
, body: JSON.stringify(expression)
}).then(res => res.json())
#+END_SRC

**** query in buckets
~POST /fts/<namespace>/buckets/<bucket1>,<bucket2>...<bucketN>/query~

通过表达式在多个bucket下(用 =,= 作为分隔符)查询对象的bucket和id, 返回结果为JSON数组:
#+BEGIN_EXAMPLE typescript
Array<{
  bucket: string
  id: string
}>
#+END_EXAMPLE

querystring:
- =limit= integer, 限制返回的查询结果数量.
- =offset= integer, 设置查询结果的偏移量.

此操作支持返回[[https://github.com/ndjson/ndjson-spec][ndjson]]格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

如果开启基于token的访问控制, 则可能需要在Querystring提供具有query权限的token:
=/fts/<namespace>/objects?token=<token>=

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --header 'Content-Type: application/json' \
  --data '"expression"' \
  "http://localhost:8080/fts/$namespace/buckets/$buckets/query"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/fts/${namespace}/buckets/${buckets.join(',')}/query`, {
  method: 'POST'
, body: JSON.stringify(expression)
}).then(res => res.json())
#+END_SRC

**** delete
=DELETE /fts/<namespace>/buckets/<bucket>/objects/<id>=

删除特定namespace和bucket中的对象.

如果开启基于token的访问控制, 则可能需要在Querystring提供具有delete权限的token:
=/fts/<namespace>/objects/<id>?token=<token>=

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  "http://localhost:8080/fts/$namespace/objects/$id"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/fts/${namespace}/objects/${id}`, {
  method: 'DELETE'
})
#+END_SRC

**** clear namespace
=DELETE /fts/<namespace>=

删除namespace中的所有对象.

**** clear bucket
=DELETE /fts/<namespace>/buckets/<bucket>=

删除bucket中的所有对象.

**** get namespace stats
=GET /fts/<namespace>/stats=

返回统计信息.
#+BEGIN_SRC typescript
{
  namespace: string
  buckets: number
  objects: number
}
#+END_SRC

**** get bucket stats
=GET /fts/<namespace>/buckets/<bucket>/stats=

返回统计信息.
#+BEGIN_SRC typescript
{
  namespace: string
  bucket: string
  objects: number
}
#+END_SRC

**** get all namespaces
=GET /fts=

列出所有的namespace.
返回JSON =Array<string>=.

此操作支持返回[[https://github.com/ndjson/ndjson-spec][ndjson]]格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

*****  Example
****** curl
#+BEGIN_SRC sh
curl 'http://localhost:8080/fts'
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch('http://localhost:8080/fts').then(res => res.json())
#+END_SRC

**** get all buckets
=GET /fts/<namespace>/buckets=

列出namespace下的所有bucket.
返回JSON =Array<string>=.

此操作支持返回ndjson格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

***** Example
****** curl
#+BEGIN_SRC sh
curl 'http://localhost:8080/fts/$namespace/buckets'
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/fts/${namespace}/buckets/${bucket}`).then(res => res.json())
#+END_SRC

** 限制Payload大小
设置环境变量 =FTS_PAYLOAD_LIMIT= 可限制服务接受的单个请求的Payload字节数, 默认值为1048576(1MB).

设置环境变量 =FTS_WRITE_PAYLOAD_LIMIT= 可限制write接受的单个请求的Payload字节数,
默认值继承自 =FTS_PAYLOAD_LIMIT=.
